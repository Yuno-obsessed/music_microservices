version: '3.9'
services:
  auth-service:
    container_name: auth-service
    build: AuthService/
    ports:
      - "8081:8081"
    env_file:
      - AuthService/.env
    healthcheck:
      test: curl --fail http://localhost:8081/api/v1/healthcheck
      interval: 3s
      retries: 2
    depends_on:
      postgres:
        condition: service_healthy
  minio:
    image: quay.io/minio/minio:latest
    restart: unless-stopped
    command: server --address ":9000" --console-address ":9001" /data
    env_file:
      - .env
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    volumes:
      - /storage/minio:/data
  postgres:
    container_name: auth-db
    image: postgres:latest
    ports:
      - "27015:27015"
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "pg_isready", "-q", "-d", "${POSTGRES_DB}", "-U", "${POSTGRES_USER}"]
      interval: 5s
      timeout: 2s
      retries: 3
    restart: always
    volumes:
      - postgres-data:/var/lib/postgresql/data/
  migrate:
    restart: on-failure
    env_file:
      - .env
    image: migrate/migrate
    depends_on:
      postgres:
        condition: service_started
    volumes:
      - ./internal/infra/db/migrations/:/migration
    command:
      [ "-path", "/migration", "-database", "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@tcp(postgres)/${POSTGRES_DB}", "up","1" ]
#  cloud-service:
#    build:
#      dockerfile:
#        CloudService/Dockerfile
#  database-service:
#    build:
#      dockerfile:
#        DatabaseService/Dockerfile
#  mail-service:
#    build:
#      dockerfile:
#        MailService/Dockerfile
#  order-service:
#    build:
#      dockerfile:
#        OrderService/Dockerfile
volumes:
  postgres-data: