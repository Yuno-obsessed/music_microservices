// Code generated by MockGen. DO NOT EDIT.
// Source: service/mail/interfaces/mail.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	dto "github.com/Yuno-obsessed/music_microservices/MailService/domain/dto"
	gomock "github.com/golang/mock/gomock"
)

// MockMail is a mock of Mail interface.
type MockMail struct {
	ctrl     *gomock.Controller
	recorder *MockMailMockRecorder
}

// MockMailMockRecorder is the mock recorder for MockMail.
type MockMailMockRecorder struct {
	mock *MockMail
}

// NewMockMail creates a new mock instance.
func NewMockMail(ctrl *gomock.Controller) *MockMail {
	mock := &MockMail{ctrl: ctrl}
	mock.recorder = &MockMailMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMail) EXPECT() *MockMailMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockMail) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMailMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMail)(nil).Delete), id)
}

// DeleteAllOfRecipient mocks base method.
func (m *MockMail) DeleteAllOfRecipient(email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllOfRecipient", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfRecipient indicates an expected call of DeleteAllOfRecipient.
func (mr *MockMailMockRecorder) DeleteAllOfRecipient(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfRecipient", reflect.TypeOf((*MockMail)(nil).DeleteAllOfRecipient), email)
}

// GetByRecipient mocks base method.
func (m *MockMail) GetByRecipient(email string) ([]dto.Mail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByRecipient", email)
	ret0, _ := ret[0].([]dto.Mail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByRecipient indicates an expected call of GetByRecipient.
func (mr *MockMailMockRecorder) GetByRecipient(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByRecipient", reflect.TypeOf((*MockMail)(nil).GetByRecipient), email)
}

// Save mocks base method.
func (m *MockMail) Save(mail dto.Mail) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", mail)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockMailMockRecorder) Save(mail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockMail)(nil).Save), mail)
}
