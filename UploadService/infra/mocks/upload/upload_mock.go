// Code generated by MockGen. DO NOT EDIT.
// Source: service/upload/interfaces/upload.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	entity "github.com/Yuno-obsessed/music_microservices/UploadRepository/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockUpload is a mock of Upload interface.
type MockUpload struct {
	ctrl     *gomock.Controller
	recorder *MockUploadMockRecorder
}

// MockUploadMockRecorder is the mock recorder for MockUpload.
type MockUploadMockRecorder struct {
	mock *MockUpload
}

// NewMockUpload creates a new mock instance.
func NewMockUpload(ctrl *gomock.Controller) *MockUpload {
	mock := &MockUpload{ctrl: ctrl}
	mock.recorder = &MockUploadMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpload) EXPECT() *MockUploadMockRecorder {
	return m.recorder
}

// DeleteUpload mocks base method.
func (m *MockUpload) DeleteUpload(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUpload", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUpload indicates an expected call of DeleteUpload.
func (mr *MockUploadMockRecorder) DeleteUpload(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUpload", reflect.TypeOf((*MockUpload)(nil).DeleteUpload), id)
}

// GetByEntity mocks base method.
func (m *MockUpload) GetByEntity(uentity string) ([]entity.Upload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEntity", uentity)
	ret0, _ := ret[0].([]entity.Upload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEntity indicates an expected call of GetByEntity.
func (mr *MockUploadMockRecorder) GetByEntity(uentity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEntity", reflect.TypeOf((*MockUpload)(nil).GetByEntity), uentity)
}

// GetByName mocks base method.
func (m *MockUpload) GetByName(name string) (entity.Upload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", name)
	ret0, _ := ret[0].(entity.Upload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockUploadMockRecorder) GetByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockUpload)(nil).GetByName), name)
}

// SaveUpload mocks base method.
func (m *MockUpload) SaveUpload(event entity.Upload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUpload", event)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUpload indicates an expected call of SaveUpload.
func (mr *MockUploadMockRecorder) SaveUpload(event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUpload", reflect.TypeOf((*MockUpload)(nil).SaveUpload), event)
}

// UpdateUpload mocks base method.
func (m *MockUpload) UpdateUpload(oldname, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUpload", oldname, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUpload indicates an expected call of UpdateUpload.
func (mr *MockUploadMockRecorder) UpdateUpload(oldname, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUpload", reflect.TypeOf((*MockUpload)(nil).UpdateUpload), oldname, name)
}
